[ 통신 ]
    1. 정의 : 매체를 사용하여 정보를 서로 주고 받는 과정/행위
    2. 사용처 : 전화, 우편, 전신, 무전기, 웹통신* 등등
    3. 서로 주는 받는 과정 : request(요청), response(응답)
[인터넷]
    1. 정의 : 통신기기로 연결하여 통신 프로토콜을 이용한 정보를 주고받는 과정
    2. 사용처 : 무선(WIFI), 유선(LAN) 등
[네트워크]
    1. 정의 : 인터넷을 통해 연결된 구조에서 정보를 주고받는 과정
    2. 특징 : (1) 글로벌 연결성, (2)분산 구조 , (3) 다양한서비스 (4) **프로토콜**
[프로토콜]
    1. 정의 : 네트워크에서 데이터를 통신하기 위한 규칙 및 절차
        EX] 신호등, 도로명체계, 전화번호 체계 등등
    2. 주요 프로토콜
        1. IP   : Internet Protocol : 네트워크를 사용하는 컴퓨터 *식별* 번호
            - ip주소체계 : 0~255 사이 숫자로 4자리를 가지는 구조. ex] 192.168.40.185
                - localhost (비공개용) vs 192.168.40.185(공개용)
            - 내 IP찾기 : cmd -> ipconfig
                - http://localhost:8080/index.jsp         (비공개용)
                - http://192.168.40.185:8080/index.jsp    (공개용)

        2. PORT : 네트워크 를 사용하는 컴퓨터 안에서 프로그램(프로세스) *식별* 번호
            - port체계 : 0 ~ 65535 사이로사용
            - 주요PORT :  3306(MYSQL) , 8080(톰캣/자바웹서버), 20/21( FTP ) , 53( DNS) 등등
            - 사설PORT : 1000~50000 으로 아무거나 사용 (중복불가능)
            - 실행중인PORT찾기 : cmd -> "netstat -ano"
                port강제종료/프로그램강제종료 : taskkill /f /pid [PID] , 예] taskkill /f /pid 6420

        3. DNS  : 도메인 네임 서비스 : IP 를 사람이 이해할 수 쉬운 문자로 변환 (*중계*) 서비스
            -> http://192.168.40.185:8080/index.jsp <--- 사용자(사람)는 숫자를 암기하기 어렵다.
            -> 도메인 사용하여 특정한 IP를 문자로 변경하면 사용자(사람)는 문자를 암기하기 쉽다.
                -> 도메인 진짜 ip 알기 : cmd -> "nslookup 도메인주소"  ex] nslookup www.naver.com
        4. *HTTP* : 텍스트 문서 이동 규약 : html/xml 문서들을 통신하는 규약
        5. HTTPS: HTTP에 암호화(보안SSL) 체계를 부여한 규약
        6. SMTP : 간이 메일 이동 규약 , 메일 전송 서비스 ex] 네이버/구글/카카오 도메인회사들이 무료제공
        7. FTP  : 파일 이동 규약 ,
        8. SSL  : Secure Sockets Layer , 웹사이트와 브라우저 간의 보안 통신 기술 : 암호화 기술

[ Apache Tomcat ]
    1. 정의 : 자바 기반의 웹 프로그램(애플리케이션)
    2. 주로 JSP 와 서블릿 기반

[ Servlet ]
    1. 정의 : 자바 기반의 동적 웹 페이지를 만들기 위한 클래스
    2. 역할 : HTTP 요청(request)을 받고 HTTP 응답(response)으로 준다.
    3. 사용처 : Spring( @Controller )
    4. 환경 : 톰캣 서버내 서블릿 컨테이너(메모리) 존재한다.

[ 톰캣 세션 ] * 세션이라는 용어는 여러곳에서 사용된다.
    1. 정의 : 톰캣 서버내 데이터를 저장하고 관리할 수 있게 메모리 제공
    2. 목적 : 1.상태(데이터)관리 2.인증/권한 3.효율적인 데이터 관리
    3. 주 사용처 :
        1. 로그인 상태
        2. (비회원제) 장바구니/세션 VS (회원제)장바구니/DB
        3. 자동로그인, 테마 등등 사용자의 설정값
        4. 실시간 처리 , 웹게임
        등등 == 실무에서는 세션에 과부화에 따른 고민!!
    4. 특징 : 브라우저(크롬/엣지/사파리 등) 마다 별도의 세션 객체가 할당 된다.

HTTP : HyperText Transfer Protocol
    - 문자 이동 규약/규칙
    1. 정의 : 웹/앱 에서 사용되는 문자/바이트 통신 규약

    2. 특징
        1. 무상태 프로토콜( 상태 없고 / 저장기능 없다 )
        2. 독립적 , 이전 통신 과 다음 통신은 관련이 없다.
        3. TCP/IP 프로토콜의 종속되어 동작 한다. , ip를 사용한다. http://192.168.40.185

    3. 주소체계
        * http:// ip번호 : port번호 / 자원위치
        * 자원위치 :
            (1) JSP는 프로젝트내 webapp폴더이하경로
            (2) js/css/img등등 resources->static폴더이하경로
            (3) controller는 @RequestMapping(),@XXXMapping() 경로
        1. URL : 웹 자원의 주소 , 네트워크 상의 자료가 어디에 있는 위치를 표시하는 규약
            https://nid.naver.com/user2/join/agree
        2. URI : 각종 자료들의 유일한 이름이나 위치를 표시하는 규약 , URL + 쿼리스트링
            https://nid.naver.com/user2/join/agree?lang=ko_KR

    4. HTTP HEADER : HTTP 통신 정보/옵션 정보가 들어있는 곳
        * 브라우저의 F12(개발자도구) -> 네트워크 탭 확인 가능 *
        [ 주요 속성 ]
        1. HTTP METHOD : HTTP 이용한 통신 요청할 때 분류하는 규칙
        2. HTTP BODY : HTTP 이용하여 데이터의 내용/본문 보낼때 사용되는 규칙
        3. HTTP Content-Type : HTTP 이용하여 데이터의 타입 정보 포함하는 규칙
        4. HTTP HOST : HTTP 이용한 통신 요청하는 서버의 도메인 주소

    5. HTTP METHOD 종류 ,
        1. GET      : @GetMapping       Create
        2. POST     : @PostMapping      Read
        3. PUT      : @PutMapping       Update
        4. DELETE   : @DeleteMapping    Delete

    6. HTTP Content-Type 종류
        1. 정의 : HTTP 의 요청 과 응답의 본문(BODY) 데이터 형식을 나타내는 HTTP header 정보 중하나
        2. 목적 : 서버와 클라이언트가 데이터를 주고 받는데 있어서 형식 명시/표시 한다.
        3. 종류 :
            1) text/html                            : html 문서( jsp 포함 )
            2) text/plain                           : 일반텍스트( 자바에서 String 반환 )
            3) application/json                     : JSON데이터( REST API 주데이터 )*
            4) application/x-www-form-urlencoded    : 폼 형식 데이터( html <form> 마크업 )
            5) multipart/form-data                  : 첨부파일 업로드, 대용량 데이터(바이트)

    7. HTTP 사용처
        1) 브라우저 : 크롬,엣지,사파리 등등 에서 웹주소(get방식) 입력창
        2) Talend API : 개발자 입장 에서의 HTTP 테스트
        3) JS : fetch, ajax(jquery) , axios(node.js) 등등 HTTP 통신 라이브러리

    8. HTTP 통신의 데이터를 보내는 방법
        방법1) 쿼리스트링 이용하는 방법 ( GET, POST, PUT, DELETE ) , 경로상의 데이터 노출 된다.
            - URL 주소상의 '?'물음표 뒤로 매개변수 와 값을 표시하여 &엔퍼센트로 구분한다.
            - localhost:8080/member/login.jsp?id=qwe
            - 스프링 매핑 : @RequestParam

        방법2) BODY 이용하는 방법 ( POST, PUT ) , 경로상의 데이터 노출 안된다.
            - HTTP 요청 과 응답 내용 자체를 전달하는 방법
            - localhost:8080/member/login.jsp       ,  { "id" : "qwe" }
            - 스프링 매핑 : @RequestBody

        방법3) FORM 이용하는 방법( POST )
            - HTML <form> 마크업을 이용한 데이터를 보내는 방법
            - 종류 :
                1) 데이터위주 폼 : application/x-www-form-urlencoded ,
                2) 첨부파일 폼  : multipart/form-data
            - 스프링 매핑 : @ModelAttribute

    9. HTTP 응답 코드
        1. 정의 : 서버가 클라이언트의 요청에 대한 결과를 나타내는 코드
        2. 종류
            - 1xx : 요청을 받고 진행중 상태
            - 2xx : 요청을 받고 응답을 처리한 상태
                *200* : 요청을 받고 응답 자료 있다.
                201 : 저장 성공 하고 응답 자료 있다.
                204 : 저장 성공 하고 응답 자료 없다.
            - 3xx : 요청을 완료하기 위한 추가 조치 요구 상태
            - 4xx : 클라이언트 오류
                400 : 서버가 이해할수 없는 요청 ( 쿼리스트링,body, 매핑 오류 )
                401 : 권한 없음
                403 : 권한 거부
                *404* : 서버가 요청에 따른 주소상의 자원이 존재하지 않을때*
                409 : 중복 값 일때
            - 5xx : 서버 오류
                *500* : 서버의 예기치 못한 오류 발생

