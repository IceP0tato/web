[ @ : 어노테이션 = 설명/방법 ]
    1. 정의 : 자바 및 Spring 에서 코드에 메타데이터를 추가하는 문법
    2. 목적 : 1.메타데이터 제공 2. 코드 간소화 3. 가독성 향상
    3. 종류
        1. 표준 어노테이션 : 자바에서 기본적으로 제공하는 어노테이션
            @Override : 상위 클래스로부터 메소드를 재정의을 설명 할때 사용
            @Deprecated : 더 이상 사용하지 않는 코드라고 설명 할때 사용
            등등
        2. 메타 어노테이션 : 코드를 정의하거나 동작 제어 할때 사용되는 어노테이션
            1. 서블릿(자바 웹클래스) 제공
            2. 스프링 회사 제공하는 @어노테이션

    4. 어노테이션 만들기
        1. @interface 어노테이션{  }
        2. 인터페이스 위에 다양한 @ 붙인다. 설정한다.
            @Retention( ) : 어노테이션 생성주기(유지기간)을 설정
                @Retention( RetentionPolicy.RUNTIME ) // 런타임(실행중)까지 유지 뜻
                @Retention( RetentionPolicy.CLASS ) // .class 파일에 포함 뜻 , 실행이 아닐때 유지 뜻
                @Retention( RetentionPolicy.SOURCE ) // 컴파일 이후에 삭제 한다는 뜻
            @Target( ) : 어노테이션 적용할 수 있는 위치(대상)을 설정
                @Target( ElementType.METHOD ) : 메소드에서 사용 뜻
                @Target( ElementType.TYPE ) : 클래스,인터페이스 등등 타입 사용 뜻
                @Target( ElementType.FIELD ) : 멤버변수 사용 뜻
                @Target( ElementType.PARAMETER ) : 매개변수  사용 뜻
                @Target( ElementType.CONSTRUCTOR ) : 생성자  사용 뜻

[ 메타데이터 ]
    1. 정의 : 코드를 설정하는 데이터 , 사용법 정의
    2. 목적 : 자바 코드에 *추가적인 데이터*를 주입/넣기 할때 사용
    3. 동작 구조 :
        1. 컴파일(번역) .java --> .class 파일 번역 하면서 바이트로 변환
        2. 리플렉션 : 런타임(실행중)에 클래스를 읽어와서 동적(할당)으로 객체 생성/조작
            Class.forName("com.mysql.cj.jdbc.Driver");
            - 프로그램 실행중 MYSQL 클래스 로드 함수. new Driver();
    3. 예] 스티커/라벨/설명서/태그 처럼 해당 코드를 사용하는 방법/부가 정보 *부착*

1. @SpringBootApplication : 스프링부트 환경 설정
    1) @SpringBootConfiguration : 프로젝트내 @Configuration 어노테이션을 찾아서 bean(객체) 설정/등록 할 수 있도록 설정
    2) @EnableAutoConfiguration : Spring Boot 가 자동으로 필요한 bean(객체)을 설정/등록. 웹서버인 내장형 TomCat 설정
    3) @ComponentScan : **** 현재클래스 기준으로 현 패키지 및 하위 패키지 **** 내 자동으로 컴포넌트(클래스) 들을 스캔해서 등록
        (1) 스캔 대상 : @Component @RestController @Controller @Service @Repository @Mapper 등등 주로 MVC 어노테이션
        (2) 주의할점 : 현재 AppStart 클래스 기준의 상위 패키지는 스캔 안되므로 프로젝트 항상 최상위 폴더에 위치한다.

2. @Component       : bean(객체) 자동으로 생성
3. @Controller      : HTTP(웹)통신 요청 과 응답(view) 처리 , + @Component
4. @RestController  : HTTP(웹)통신 요청 과 응답(json) 처리 , + @Controller + @ResponseBody
5. @PostMapping     : HTTP(웹)통신의 METHOD 중에 POST 방식으로 요청 매핑(연결) , 주로 Create
6. @GetMapping      : HTTP(웹)통신의 METHOD 중에 GET 방식으로 요청 매핑(연결) , 주로 Read
7. @PutMapping      : HTTP(웹)통신의 METHOD 중에 PUT 방식으로 요청 매핑(연결) , 주로 Put
8. @DeleteMapping   : HTTP(웹)통신의 METHOD 중에 DELETE 방식으로 요청 매핑(연결) , 주로 DELETE
   - @XXXXMapping( "/URL정의"): Mapping 어노테이션 (소괄호 안에서 정의할 웹주소(URL)을 baseURL(http://localhost:8080) 뒤로 사용할 주소 정의
   - @GetMapping("/member")  : "http://localhost:8080/member"
9. @ResponseBody        : HTTP(웹)통신의 요청 처리 이후 응답 반환시 *JAVA 타입에서 주로 JSON 타입으로 자동 변환 *
10. @RequestParam       : 쿼리스트링, GET/DELETE , 단일 매개변수   , int/String/List/Map
11. @ModelAttribute     : 쿼리스트링, GET/DELETE , 복수 매개변수   , DTO/VO
12. @RequestBody        : HTTP본문 , POST/PUT   , 본문 객체(JSON) , DTO/Map/List

[ HTTP 자료 포함 ]
    방법1. 쿼리스트링  ? URL 경로상의 매개변수 표현 , get/post/put/delete method 표현 , 매개변수 노출O
        예] http://localhost:8080/board ? mname = 유재석 & age = 10
    방법2. BODY(본문) ? HTTP BODY(본문)에 매개변수 표현 , post/put method 표현 , 매개변수 노출X
        예] http://localhost:8080
        F12[개발자도구] -> [네트워크] -> 지정 통신명 -> [페이로드]